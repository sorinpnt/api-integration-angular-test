// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var app;

  app = angular.module("studies", ['ui.router', 'ngResource', 'ui.bootstrap']);

  app.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('login/');
    $stateProvider.state("login", {
      url: '/login/',
      templateUrl: '../static/views/log_in.html',
      controller: 'loginController'
    }).state("display-list", {
      url: '/list/',
      templateUrl: '../static/views/list_display.html',
      controller: 'coursesController'
    }).state('edit-course', {
      url: '/edit/:id',
      templateUrl: '../static/views/edit_course.html',
      controller: 'editCourseController'
    }).state("new-course", {
      url: '/new/',
      templateUrl: '../static/views/new_course.html',
      controller: 'newCourseController'
    }).state('404', {
      url: '/404/',
      templateUrl: '../static/views/error.html'
    });
  });

  app.factory("userCredentials", [
    function() {
      return {
        user: "",
        pass: "",
        securityToken: "",
        loginAttemptFailed: false
      };
    }
  ]);

  app.factory("course", [
    function() {
      return {
        authorId: 0,
        authorName: "",
        created: "",
        displayOrder: 0,
        liveActivities: 0,
        liveStatus: 0,
        modified: "",
        status: 0,
        title: "",
        total_activities: 0,
        isEditable: false
      };
    }
  ]);

  app.factory("studyResource", [
    "$resource", function($resource) {
      return $resource("http://localhost:8000/index/api/v1.0/courses/:id/?format=json", {}, {
        getElements: {
          url: 'http://localhost:8000/index/api/v1.0/courses/?format=json',
          method: 'get',
          responseType: 'application/json; charset=UTF-8',
          isArray: false,
          cache: false
        },
        get: {
          method: 'get',
          responseType: 'application/json; charset=UTF-8',
          isArray: false,
          params: {
            id: '@id'
          }
        },
        add: {
          method: 'POST',
          responseType: 'application/json; charset=UTF-8',
          isArray: false
        },
        update: {
          method: 'put',
          params: {
            id: '@id'
          }
        },
        removeCourse: {
          method: 'delete',
          params: {
            id: '@id'
          }
        }
      });
    }
  ]);

  app.service("loginResource", function() {
    this.user = '';
    this.pass = '';
    this.validCredentials = false;
    this.checkCredentials = function() {
      var securityToken;
      securityToken = null;
      if (this.user.localeCompare("Manager") === 0 && this.pass.localeCompare("headware4") === 0) {
        this.validCredentials = true;
        securityToken = 'verb43dSDGreagtykhmpo4354g42qvfREGeqrg34ew78';
        return securityToken;
      }
    };
    this.setCredentials = function(user, pass) {
      this.user = user;
      return this.pass = pass;
    };
    this.loggedIn = function() {
      return this.validCredentials;
    };
  });

  app.service("modalService", [
    "$modal", function($modal) {
      this.modalInstance = null;
      this.courseId = 0;
      this.courseName = "";
      this.setCourseId = function(id) {
        this.courseId = id;
      };
      this.getCourseId = function() {
        return this.id;
      };
      this.openNewInstance = function() {
        this.modalInstance = $modal.open({
          templateUrl: '../static/views/modal.html',
          controller: 'modalActionsController'
        });
      };
      this.getInstance = function() {
        return this.modalInstance;
      };
    }
  ]);

  app.controller("modalActionsController", [
    "$scope", "modalService", "studyResource", "$state", "$stateParams", function($scope, modalService, studyResource, $state, $stateParams) {
      $scope.courseName = modalService.courseName;
      $scope.ok = function() {
        studyResource.removeCourse({
          id: modalService.courseId
        });
        modalService.getInstance().close();
        $state.transitionTo($state.current, $stateParams, {
          reload: true,
          inherit: false,
          notify: true
        });
      };
      $scope.cancel = function() {
        modalService.getInstance().close();
      };
    }
  ]);

  app.controller("loginController", [
    "$scope", "loginResource", "userCredentials", "$state", function($scope, loginResource, userCredentials, $state) {
      $scope.userCredentials = userCredentials;
      $scope.login = function() {
        loginResource.setCredentials($scope.userCredentials.user, $scope.userCredentials.pass);
        if (loginResource.checkCredentials()) {
          $scope.userCredentials.loginAttemptFailed = false;
          $state.go('display-list');
        } else {
          $scope.userCredentials.loginAttemptFailed = true;
        }
      };
    }
  ]);

  app.controller("coursesController", [
    "$scope", "loginResource", "course", "studyResource", "$state", "modalService", "$filter", function($scope, loginResource, course, $studyResource, $state, modalService, $filter) {

      /*
      	if not loginResource.loggedIn()
      		$state.go 'login'
       */
      $scope.sorting = {
        attributeName: "title",
        descending: false
      };
      $scope.itemsPerPage = 10;
      $scope.modalService = modalService;
      course.isEditable = false;
      $scope.currentPage = 0;
      $scope.$on('pagesCount', function(event, pagesArray) {
        $scope.pagesArray = pagesArray;
        $scope.totalPages = pagesArray.length;
      });
      $scope.$on('pageChanged', function(event, resultSet) {
        $scope.courses = resultSet;
      });
      $scope.sort = function(attrName) {
        $scope.sorting.attributeName = attrName;
        if ($scope.sorting.descending) {
          $scope.sorting.descending = false;
        } else {
          $scope.sorting.descending = true;
        }
        $scope.courses = $filter("orderByAttribute")($scope.courses, $scope.sorting.attributeName, $scope.sorting.descending);
      };
      $scope.setItemsPerPage = function() {
        $scope.$broadcast('setRecordsPerPage', $scope.itemsPerPage);
      };
      $scope.goToPage = function(page) {
        $scope.$broadcast('getRecords', page);
        $scope.currentPage = page;
      };
      $scope.limitItems = function() {
        $scope.reloadItems();
      };
      $scope.editCourse = function(id) {
        course.isEditable = true;
        $state.go('edit-course', {
          id: id
        });
      };
      $scope.deleteCourse = function(id, courseName) {
        $scope.modalService.courseId = id;
        $scope.modalService.courseName = courseName;
        $scope.modalService.openNewInstance();
      };
      $scope.newCourse = function() {
        course.modified = $filter('date')(new Date(), 'HH:MM:ss', "UTC");
        course.created = $filter('date')(new Date(), 'HH:MM:ss', "UTC");
        course.isEditable = true;
        $state.go('new-course');
      };
    }
  ]);

  app.controller("editCourseController", [
    "$scope", "course", "loginResource", "studyResource", "$state", "$stateParams", "$filter", function($scope, course, loginResource, $studyResource, $state, $stateParams, $filter) {

      /*
      	if not loginResource.loggedIn()	 
      		$state.go 'login'
       */
      $scope.isEditable = !course.isEditable;
      $studyResource.get({
        id: $stateParams.id
      }).$promise.then(function(data) {
        $scope.course = data;
      }, function(error) {
        $state.go("404");
      });
      $scope.saveEdit = function() {
        $scope.course.modified = $filter('date')(new Date(), 'HH:MM:ss', "UTC");
        $studyResource.update({
          id: $stateParams.id
        }, $scope.course);
        $state.go("display-list");
      };
      $scope.cancelEdit = function() {
        $state.go("display-list");
      };
    }
  ]);

  app.controller("paginationController", [
    "$scope", "studyResource", function($scope, $studyResource) {
      $scope.pagesArray = [];
      $scope.recordsCache = [];
      $scope.recordsPerPage = 0;
      $scope.firstPage = 0;
      $scope.lastPage = 0;
      $studyResource.getElements(function(data) {
        $scope.setUpControllerData(data.objects);
      });
      $scope.setUpControllerData = function(allRecords) {
        $scope.recordsCache = allRecords;
        $scope.recordsPerPage = 10;
        $scope.firstPage = 0;
        $scope.lastPage = $scope.recordsCache.length;
        $scope.pagesArray = new Array(Math.ceil($scope.recordsCache.length / $scope.recordsPerPage));
        $scope.$emit('pagesCount', $scope.pagesArray);
        $scope.$emit('getRecords', 0);
      };
      $scope.$on('setRecordsPerPage', function(event, itemsPerPage) {
        $scope.recordsPerPage = itemsPerPage;
        $scope.pagesArray = new Array(Math.ceil($scope.recordsCache.length / $scope.recordsPerPage));
        $scope.$emit('pagesCount', $scope.pagesArray);
        $scope.$emit('getRecords', 0);
      });
      $scope.$on('getRecords', function(event, pageNumber) {
        var lowerLimit, recordsArray, upperLimit;
        lowerLimit = pageNumber * $scope.itemsPerPage;
        upperLimit = (pageNumber + 1) * $scope.itemsPerPage;
        if (upperLimit > $scope.recordsCache.length) {
          upperLimit = $scope.recordsCache.length;
        }
        recordsArray = $scope.recordsCache.slice(lowerLimit, upperLimit);
        $scope.$emit('pageChanged', recordsArray);
      });
    }
  ]);

  app.controller("newCourseController", [
    "$scope", "course", "loginResource", "studyResource", "$state", "$filter", function($scope, course, loginResource, $studyResource, $state, $filter) {

      /*
      	if not loginResource.loggedIn()	 
      		$state.go 'login'
       */
      $scope.course = course;
      course.authorId = 0;
      course.authorName = "";
      $scope.course.created = $filter('date')(new Date(), 'HH:MM:ss', "UTC");
      $scope.course.modified = $filter('date')(new Date(), 'HH:MM:ss', "UTC");
      course.displayOrder = 0;
      course.liveActivities = 0;
      course.liveStatus = 0;
      course.status = 0;
      course.title = "";
      course.total_activities = 0;
      $scope.addNewCourse = function() {
        $studyResource.add($scope.course);
        $state.go("display-list");
      };
      $scope.cancelNewCourse = function() {
        $state.go("display-list");
      };
    }
  ]);

  app.service("objectCompareHelper", [
    function() {
      this.compare = function(objectOne, objectTwo, attribute) {
        if (typeof objectOne[attribute] === 'string') {
          if (objectOne[attribute].localeCompare(objectTwo[attribute]) === -1) {
            return false;
          } else {
            return true;
          }
        }
        if (typeof objectOne[attribute] === 'number') {
          return objectOne[attribute] > objectTwo[attribute];
        }
      };
    }
  ]);

  app.filter("orderByAttribute", [
    "objectCompareHelper", function(objectCompareHelper) {
      return function(courses, attribute, reverse) {
        var i, j, len, value;
        len = courses.length;
        value = void 0;
        i = void 0;
        j = void 0;
        i = 0;
        while (i < len) {
          value = courses[i];
          j = i - 1;
          while (j > -1 && objectCompareHelper.compare(courses[j], value, attribute)) {
            courses[j + 1] = courses[j];
            j--;
          }
          courses[j + 1] = value;
          i++;
        }
        if (reverse) {
          courses.reverse();
        }
        return courses;
      };
    }
  ]);

}).call(this);
